variables:
  DJANGO_APP_INIT: django-pg-app-init
  DJANGO_APP: django-pg-app
  APP_VALUES_FILE: values.yaml
  VALUES_APP_PATHED: /tmp/$APP_VALUES_FILE
  CLEAN_UP_APP: "true"
  BUILD:
    value: "false"
    description: "Will the build stage be started"

stages:
  - build-image-app
  - pre-build
  - build-helm-django-app
  - deploy

build-image-app:
  stage: build-image-app
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "Check variables..."
    - for var in ${PG_PASSWORD} ${CI_REGISTRY} ${GITLAB_USER} ${GITLAB_PASSWORD}; do echo $var || exit 1; done
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${GITLAB_USER}" "${GITLAB_PASSWORD}" | base64 | tr -d '\n' )\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/${DJANGO_APP_INIT}/"
      --dockerfile "Dockerfile"
      --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}:1.0"
  rules:
    - if: $BUILD != "false"

pre-build:
  stage: pre-build
  image: python
  script:
    - echo PACKAGE_VERSION=$(python3 $CI_PROJECT_DIR/package-name.py) >> build.env
    - echo PACKAGE_NAME=$(python3 $CI_PROJECT_DIR/chart-name.py) >> build.env
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $BUILD != "true"

build-helm-django-app:
  stage: build-helm-django-app
  image:
    name: alpine/helm:latest
    entrypoint: ['']
  script:
    - echo "Build Started..."
    - echo ${CI_PROJECT_ID}
    - echo $PACKAGE_NAME
    - echo $PACKAGE_VERSION
    - helm package $CI_PROJECT_DIR/$PACKAGE_NAME
    - 'curl --request POST --user gitlab-ci-token:$CI_REGISTRY_PASSWORD --form "chart=@${PACKAGE_VERSION}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"'
    - echo "Chart Package Published to Gitlab package registry"


# This Stage will Deploy Helm Chart to K8S Cluster
Deploy-Helm-Chart:
  stage: deploy
  image:
    name: dtzar/helm-kubectl
    entrypoint: ['']
  before_script:
    - REGISTRY_CREDS=$(echo -n ${GITLAB_USER}:${GITLAB_PASSWORD} | base64 -w 0)
    - echo $REGISTRY_CREDS
    - CONF_JSON=$(echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"${REGISTRY_CREDS}\"}}}")
    - echo $CONF_JSON
    - CONF_JSON_BASE64=$(echo -n $CONF_JSON|base64 -w 0)
    - echo $CONF_JSON_BASE64
  script:
    - echo "Deployment Started"
    - kubectl config use-context ${CI_PROJECT_PATH}:gla
    - helm repo add --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_PROJECT_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
    - helm repo update
    - helm repo list
    - | # Cleanup
      if [ ! "${CLEAN_UP_APP}" = false ]; then
        echo "Cleanup..."
        kubectl get deployments --all-namespaces | grep django-app && kubectl delete deployment django-app
        echo "Podes list after Cleanup:"
        kubectl get pods -o wide
      fi
    - cat $DJANGO_APP/$APP_VALUES_FILE | sed -e s#PG_PASSWORD#${PG_PASSWORD}#
      -e s#__VERSION__#${CI_REGISTRY}/${CI_PROJECT_PATH}:1.0#
      | tee ${VALUES_APP_PATHED}
    - kubectl get secret | grep regcred && kubectl delete secret regcred
    - kubectl create secret docker-registry regcred --docker-server=${CI_REGISTRY} --docker-username=${GITLAB_USER} --docker-password=${GITLAB_PASSWORD}
    - helm list -aq | grep django-pg-app && helm delete django-pg-app
#    - helm install -f ${VALUES_APP_PATHED} django-pg-app django-pg-app/
    - echo "helm upgrade --install ${PACKAGE_NAME} -f ${VALUES_APP_PATHED} $CI_PROJECT_NAME/${PACKAGE_NAME}"
    - helm upgrade --install django-pg-app -f ${VALUES_APP_PATHED} $CI_PROJECT_NAME/django-pg-app
    - kubectl get deployment
    - kubectl get pods
    - kubectl get svc